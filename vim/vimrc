set nocompatible " be iMproved

syntax enable
set t_Co=256
set termguicolors
set encoding=utf8

" line numbers
set number

" with a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
let mapleader = ","
let g:mapleader = ","

" jk is escape
inoremap jk <esc>

nmap <leader>w :w!<cr>
nmap <leader>q :q<cr>

" [c]lear [s]earches
nnoremap <silent> <leader>cs :nohlsearch<CR>

" splits - <leader>[s]plit + hjkl
if exists('g:vscode')
  nmap <leader>sh <Cmd>call VSCodeNotify('workbench.action.splitEditorLeft')<CR>
  nmap <leader>sl <Cmd>call VSCodeNotify('workbench.action.splitEditorRight')<CR>
  nmap <leader>sk <Cmd>call VSCodeNotify('workbench.action.splitEditorUp')<CR>
  nmap <leader>sj <Cmd>call VSCodeNotify('workbench.action.splitEditorDown')<CR>
else
  nmap <leader>sh :leftabove  vsplit<CR>
  nmap <leader>sl :rightbelow vsplit<CR>
  nmap <leader>sk :leftabove  split<CR>
  nmap <leader>sj :rightbelow split<CR>
endif

" selecte pasted text
nnoremap gp `[v`]

" yank till end of line
nnoremap Y y$

" switch to last opened buffer
if exists('g:vscode')
  nmap <Leader><Leader> <Cmd>call VSCodeCall('workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup')<CR>
else
  nmap <Leader><Leader> <C-^>
endif

" the default 4000 is way too long
set updatetime=750

" hightlight the current line & column
set cursorline
set cursorcolumn

" tab = 2 spaces
set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab
set smarttab

" do not wrap in the middle of a word
set linebreak
" experiment with no wrapping
set nowrap

set smartindent
set autoindent

" visual autocomplete for command menu
set wildmenu

" redraw only when we need to
set lazyredraw

" search and highlight as characters are entered
set incsearch
set hlsearch

" only do case sensitive search when search pattern contains uppercase letter
set ignorecase
set smartcase

" always show current position
set ruler

" show matching brackets
set showmatch
set mat=2

set laststatus=2
set hidden

" no annoying sound on errors
set belloff=all

" turn backup off, since most stuff is in SVN, git, etc anyway
set nobackup
set nowb
set noswapfile

" enable mouse for [a]ll modes
set mouse=a

" disable clipboard sharing
set clipboard=

" 80 char code width is growing on me
set colorcolumn=80

" Maintain undo history between sessions
set undofile
set undodir=~/.vim/undodir

" Return to last edit position when opening files (You want this!)
if !exists('g:vscode')
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" Delete trailing white space on save, useful for some filetypes ;)
fun! CleanExtraSpaces()
    if exists("b:noStripWhitespace")
        return
    endif

    let save_cursor = getpos(".")
    let old_query = getreg('/')
    silent! %s/\s\+$//e
    call setpos('.', save_cursor)
    call setreg('/', old_query)
endfun

if has("autocmd") && !exists('g:vscode')
    autocmd FileType markdown let b:noStripWhitespace=1
    autocmd BufWritePre * :call CleanExtraSpaces()
endif

function! AleStatus() abort
   let l:counts = ale#statusline#Count(bufnr(''))
   let l:all_errors = l:counts.error + l:counts.style_error
   let l:all_non_errors = l:counts.total - l:all_errors
   return l:counts.total == 0 ? '' : printf(
         \  ' W:%d E:%d ',
         \  l:all_non_errors,
         \  l:all_errors
         \)
endfunction

if !exists('g:vscode')
  set statusline=
  " left hand side
  set statusline=(\ %f\ )             " filepath
  set statusline+=%M                  " modified?
  set statusline+=\ %r                " readonly?
  set statusline+=\ %h                " help file?
  " right hand side
  set statusline+=%="
  set statusline+=%#GruvboxRedSign#%{AleStatus()}%*
  set statusline+=\ %y                " file type
  set statusline+=\ %l/%L             " line number / line count
  set statusline+=,%v                 " virtual column number

  set shortmess+=W                    " don't show "written" when writing
  set shortmess+=I                    " disable splash screen
endif

let &t_ut=''

" install plugin
source $HOME/.vim/plug.vim
